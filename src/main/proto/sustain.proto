syntax = "proto3";

import "google/api/http.proto";

option java_multiple_files = true;
option java_package = "org.sustain";
option java_outer_classname = "SustainQueryService";

package sustain;

service Sustain{
  // census query with MongoDB support
  rpc CensusQuery (CensusRequest) returns (stream CensusResponse) {}

  // Query Open Street Map Data
  rpc OsmQuery (OsmRequest) returns (stream OsmResponse) {}

  // Query datasets (hospitals, dams, natural_gas_pipelines, power_plants, transmission_lines, etc.
  rpc DatasetQuery (DatasetRequest) returns (stream DatasetResponse) {}

  // Query Social Vulnerability Index (SVI) values
  rpc SviQuery (SviRequest) returns (stream SviResponse) {}

  // targeted queries - return geographical areas that satisfy a given value range of a census feature
  // Example 1: Retrieve all counties where (population >= 1,000,000)
  // Example 2: Retrieve all tracts where (median household income < $50,000/year)
  rpc ExecuteTargetedCensusQuery (TargetedCensusRequest) returns (stream TargetedCensusResponse) {}

  rpc CompoundQuery (CompoundRequest) returns (stream CompoundResponse) {}

  rpc ModelQuery (ModelRequest) returns (ModelResponse) {}
}

message ModelRequest {
  string request = 1;
}

message ModelResponse {
  string results = 1;
}

message SviRequest {
  string requestGeoJson = 1;
  SpatialOp spatialOp = 2;
}

message SviResponse {
  string data = 1;
  string responseGeoJson = 2; // geoJson associated with 'data'
}

message DatasetRequest {
  enum Dataset {
    HOSPITALS = 0;
    DAMS = 1;
    ELECTRICAL_SUBSTATIONS = 2;
    TRANSMISSION_LINES = 3;
    NATURAL_GAS_PIPELINES = 4;
    POWER_PLANTS = 5;
    FIRE_STATIONS = 6;
    FLOOD_ZONES = 7;
  }
  Dataset dataset = 1;
  string requestGeoJson = 2;
  SpatialOp spatialOp = 3;
  map<string, string> requestParams = 4;
}

message DatasetResponse {
  string response = 1;
}

message OsmRequest {
  enum Dataset {
    POINTS = 0;
    LINES = 1;
    MULTI_LINES = 2;
    MULTI_POLYGONS = 3;
    OTHER = 4;
    ALL = 5;
  }
  Dataset dataset = 1;
  string requestGeoJson = 2;
  SpatialOp spatialOp = 3;
  message OsmRequestParam {
    string key = 1;
    string value = 2;
  }
  repeated OsmRequestParam requestParams = 4;
}


message OsmResponse {
  string response = 1;
}

message CensusRequest {
  CensusResolution censusResolution = 1;
  CensusFeature censusFeature = 2;
  string requestGeoJson = 3; // bounding polygon
  SpatialOp spatialOp = 4;
}

message CensusResponse {
  string data = 1;
  string responseGeoJson = 2; // geoJson associated with 'data'
}

enum SpatialOp {
  GeoWithin = 0;
  GeoIntersects = 1;
}

enum CensusFeature {
  TotalPopulation = 0;
  MedianHouseholdIncome = 1;
  PopulationByAge = 2;
  MedianAge = 3;
  Poverty = 4;
  Race = 5;
}

enum IntraDatasetOp {
  INTERSECTION = 0;
  UNION = 1;
  OVERLAP = 2;
}

message DatasetEntry {
  string entry = 1;
}

message TargetedCensusRequest {
  CensusResolution resolution = 1;
  Predicate predicate = 2;
  SpatialOp spatialOp = 3;
  string requestGeoJson = 4; // bounding polygon
}

message TargetedCensusResponse {
  string data = 1;
  string responseGeoJson = 2; // geoJson associated with 'data'
}

enum CensusResolution {
  State = 0;
  County = 1;
  Tract = 2;
  Block = 3;
}

enum Decade {
  _2010 = 0;
  _2000 = 1;
  _1990 = 2;
  _1980 = 3;
}

message Predicate {
  enum ComparisonOperator {
    EQUAL = 0;
    GREATER_THAN = 1;
    LESS_THAN = 2;
    GREATER_THAN_OR_EQUAL = 3;
    LESS_THAN_OR_EQUAL = 4;
  }
  CensusFeature censusFeature = 1;
  Decade decade = 2;
  ComparisonOperator comparisonOp = 3;
  double comparisonValue = 4;
}


enum JoinOperator {
  INNER_JOIN = 0;
  OUTER_JOIN = 1;
  LEFT_JOIN = 2;
  RIGHT_JOIN = 3;
}


enum ComparisonOperator {
  EQUAL = 0;
  GREATER_THAN = 1;
  LESS_THAN = 2;
  GREATER_THAN_OR_EQUAL = 3;
  LESS_THAN_OR_EQUAL = 4;
}


message CompoundResponse {
  string data = 1;
  string geoJson = 2;
}


message CompoundRequest {
  oneof FirstPredicate {
    Query first_query = 1;
    CompoundRequest first_compound_request = 2;
  }

  JoinOperator join = 3;

  oneof SecondPredicate {
    Query second_query = 4;
    CompoundRequest second_compound_request = 5;
  }
}


message Query {
  string host = 1;
  int32 port = 2;
  string collection = 3;
  string query = 4; //This is a json representation of a mongodb query
}
