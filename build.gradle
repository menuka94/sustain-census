plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.8'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
}

group 'org.sustain.census'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

sourceCompatibility = 1.8

// updating the version in our release process.
def grpcVersion = '1.28.1' // CURRENT_GRPC_VERSION
def nettyTcNativeVersion = '2.0.30.Final'
def protocVersion = '3.11.0'

dependencies {
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"
    runtimeOnly "io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}"

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8'

    // https://mvnrepository.com/artifact/org.mongodb/mongo-java-driver
    compile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.12.5'

    compile 'org.json:json:20171018'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'

    testCompile "io.grpc:grpc-testing:${grpcVersion}"
    testCompile "org.mockito:mockito-core:1.9.5"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

test {
    useJUnitPlatform()
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}


// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}


startScripts.enabled = false

task sustainServer(type: CreateStartScripts) {
    mainClassName = 'org.sustain.server.SustainServer'
    applicationName = 'sustain-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task censusClient(type: CreateStartScripts) {
    mainClassName = 'org.sustain.client.CensusClient'
    applicationName = 'census-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task spatialClient(type: CreateStartScripts) {
    mainClassName = 'org.sustain.client.SpatialClient'
    applicationName = 'spatial-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task nearestHospitals(type: CreateStartScripts) {
    mainClassName = 'org.sustain.proximity.NearestHospitalsQuerier'
    applicationName = 'nearest-hospitals'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task nearestFireStations(type: CreateStartScripts) {
    mainClassName = 'org.sustain.proximity.NearestFireStationsQuerier'
    applicationName = 'nearest-fire-stations'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task nearestPowerPlants(type: CreateStartScripts) {
    mainClassName = 'org.sustain.proximity.NearestPowerPlantsQuerier'
    applicationName = 'nearest-power-plants'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(sustainServer)
    from(censusClient)
    from(spatialClient)
    from(nearestHospitals)
    from(nearestFireStations)
    from(nearestPowerPlants)
    fileMode = 0755
}
